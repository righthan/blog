const n=JSON.parse(`{"key":"v-07fb56da","path":"/posts/%E5%BE%AE%E4%BF%A1%E8%AF%BB%E4%B9%A6/Vue%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/1.html","title":"手写Vue渲染器","lang":"zh-CN","frontmatter":{"title":"手写Vue渲染器","icon":"pen-to-square","date":"2023-09-30T00:00:00.000Z","category":["微信读书"],"tag":["Vue"],"contributors":false,"editLink":false,"comment":false,"description":"前情提要 在看了《Vue.js设计于实现》的第3章的实现思路之后，参考着完成了一个简单的渲染器，能够渲染一般的DOM对象，函数式的组件和对象式的组件渲染， 并能渲染DOM对象上的style样式 渲染器的作用是将虚拟DOM转换为真实的DOM，实现一个渲染器主要有3步： 创建元素 添加属性和事件 处理children 基础的渲染器 function mountElement(vnode, container) { // 使用vnode.tag创建DOM元素 const el = document.createElement(vnode.tag) // 遍历vnode.props, 将属性, 事件添加到DOM元素 for (const key in vnode.props) { if (/^on/.test(key)) { el.addEventListener( key.substr(2).toLowerCase(), vnode.props[key] ) } else if (key === 'style') { el.style = vnode.props[key] } } // 处理children if (typeof vnode.children === 'string') { el.appendChild(document.createTextNode(vnode.children)) } else if (Array.isArray(vnode.children)) { // 递归调用renderer渲染子节点 vnode.children.forEach(child =&gt; renderer(child, el)) } // 将元素添加到挂载点下 container.appendChild(el) }","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/blog/posts/%E5%BE%AE%E4%BF%A1%E8%AF%BB%E4%B9%A6/Vue%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/1.html"}],["meta",{"property":"og:site_name","content":"Lee"}],["meta",{"property":"og:title","content":"手写Vue渲染器"}],["meta",{"property":"og:description","content":"前情提要 在看了《Vue.js设计于实现》的第3章的实现思路之后，参考着完成了一个简单的渲染器，能够渲染一般的DOM对象，函数式的组件和对象式的组件渲染， 并能渲染DOM对象上的style样式 渲染器的作用是将虚拟DOM转换为真实的DOM，实现一个渲染器主要有3步： 创建元素 添加属性和事件 处理children 基础的渲染器 function mountElement(vnode, container) { // 使用vnode.tag创建DOM元素 const el = document.createElement(vnode.tag) // 遍历vnode.props, 将属性, 事件添加到DOM元素 for (const key in vnode.props) { if (/^on/.test(key)) { el.addEventListener( key.substr(2).toLowerCase(), vnode.props[key] ) } else if (key === 'style') { el.style = vnode.props[key] } } // 处理children if (typeof vnode.children === 'string') { el.appendChild(document.createTextNode(vnode.children)) } else if (Array.isArray(vnode.children)) { // 递归调用renderer渲染子节点 vnode.children.forEach(child =&gt; renderer(child, el)) } // 将元素添加到挂载点下 container.appendChild(el) }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-01-18T01:18:36.000Z"}],["meta",{"property":"article:author","content":"Lee"}],["meta",{"property":"article:tag","content":"Vue"}],["meta",{"property":"article:published_time","content":"2023-09-30T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-01-18T01:18:36.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"手写Vue渲染器\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-09-30T00:00:00.000Z\\",\\"dateModified\\":\\"2024-01-18T01:18:36.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Lee\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":3,"title":"前情提要","slug":"前情提要","link":"#前情提要","children":[]},{"level":3,"title":"基础的渲染器","slug":"基础的渲染器","link":"#基础的渲染器","children":[]},{"level":3,"title":"渲染函数式和对象式组件","slug":"渲染函数式和对象式组件","link":"#渲染函数式和对象式组件","children":[]},{"level":3,"title":"渲染函数renderer","slug":"渲染函数renderer","link":"#渲染函数renderer","children":[]},{"level":3,"title":"测试","slug":"测试","link":"#测试","children":[]}],"git":{"createdTime":1696117680000,"updatedTime":1705540716000,"contributors":[{"name":"righthan","email":"2753875841@qq.com","commits":3}]},"readingTime":{"minutes":1.74,"words":521},"filePathRelative":"posts/微信读书/Vue设计与实现/1.md","localizedDate":"2023年9月30日","excerpt":"<h3> 前情提要</h3>\\n<p>在看了《Vue.js设计于实现》的第3章的实现思路之后，参考着完成了一个简单的渲染器，能够渲染一般的DOM对象，函数式的组件和对象式的组件渲染， 并能渲染DOM对象上的style样式</p>\\n<p>渲染器的作用是将虚拟DOM转换为真实的DOM，实现一个渲染器主要有3步：</p>\\n<ol>\\n<li>创建元素</li>\\n<li>添加属性和事件</li>\\n<li>处理children</li>\\n</ol>\\n<h3> 基础的渲染器</h3>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">function</span> <span class=\\"token function\\">mountElement</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">vnode<span class=\\"token punctuation\\">,</span> container</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token comment\\">// 使用vnode.tag创建DOM元素</span>\\n    <span class=\\"token keyword\\">const</span> el <span class=\\"token operator\\">=</span> document<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">createElement</span><span class=\\"token punctuation\\">(</span>vnode<span class=\\"token punctuation\\">.</span>tag<span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token comment\\">// 遍历vnode.props, 将属性, 事件添加到DOM元素</span>\\n    <span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">const</span> key <span class=\\"token keyword\\">in</span> vnode<span class=\\"token punctuation\\">.</span>props<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token regex\\"><span class=\\"token regex-delimiter\\">/</span><span class=\\"token regex-source language-regex\\">^on</span><span class=\\"token regex-delimiter\\">/</span></span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">test</span><span class=\\"token punctuation\\">(</span>key<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n            el<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">addEventListener</span><span class=\\"token punctuation\\">(</span>\\n                key<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">substr</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">2</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">toLowerCase</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span>\\n                vnode<span class=\\"token punctuation\\">.</span>props<span class=\\"token punctuation\\">[</span>key<span class=\\"token punctuation\\">]</span>\\n            <span class=\\"token punctuation\\">)</span>\\n        <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">else</span> <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>key <span class=\\"token operator\\">===</span> <span class=\\"token string\\">'style'</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n            el<span class=\\"token punctuation\\">.</span>style <span class=\\"token operator\\">=</span> vnode<span class=\\"token punctuation\\">.</span>props<span class=\\"token punctuation\\">[</span>key<span class=\\"token punctuation\\">]</span>\\n        <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token comment\\">// 处理children</span>\\n    <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">typeof</span> vnode<span class=\\"token punctuation\\">.</span>children <span class=\\"token operator\\">===</span> <span class=\\"token string\\">'string'</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        el<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">appendChild</span><span class=\\"token punctuation\\">(</span>document<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">createTextNode</span><span class=\\"token punctuation\\">(</span>vnode<span class=\\"token punctuation\\">.</span>children<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">else</span> <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>Array<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">isArray</span><span class=\\"token punctuation\\">(</span>vnode<span class=\\"token punctuation\\">.</span>children<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token comment\\">// 递归调用renderer渲染子节点</span>\\n        vnode<span class=\\"token punctuation\\">.</span>children<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">forEach</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">child</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token function\\">renderer</span><span class=\\"token punctuation\\">(</span>child<span class=\\"token punctuation\\">,</span> el<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token comment\\">// 将元素添加到挂载点下</span>\\n    container<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">appendChild</span><span class=\\"token punctuation\\">(</span>el<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{n as data};
