const s=JSON.parse(`{"key":"v-3bea4e16","path":"/posts/%E5%BE%AE%E4%BF%A1%E8%AF%BB%E4%B9%A6/Webpack%E5%AE%9E%E6%88%98/%E9%85%8D%E7%BD%AE%E6%B1%87%E6%80%BB.html","title":"Webpack配置汇总","lang":"zh-CN","frontmatter":{"description":"Webpack配置汇总 看完了《Webpack实战：入门、进阶与调优》(第2版)把书里提到的基本内容都罗列到了一个配置文件中方便复习，为了显示效果，重复的配置项没有注释掉 const { webpack } = require('webpack') const MiniCssExtractPlugin = require('mini-css-extract-plugin') const path = require('path') const HtmlWebpackPlugin = require('html-webpack-plugin') // 动态Html, 处理资源路径, 加载index.html(如果不使用插件dist中需要手动放入html) const Analyzer = require('webpack-bundle-analyzer').BundleAnalyzerPlugin; const DashboardPlugin = require('webpack-dashboard/plugin') // webpack打包信息展示工具 module.exports = { entry: './src/index.js', output: { // filename // 指定打包js产物的文件名 filename: 'main.js', // 打包成一个bundle--&gt;main.js filename: '[name].js', // 可选id, name等... filename: '[name]@[chunkhash].js', // 名字@hash模式打包, 有利于客户端利用hash值缓存, 如果对应模块代码没有做出修改, 多次打包hash值不会改变 // publicPath // 指定资源请求的路径, 下面配置打包出来script标签src='/dsit/assets' publicPath: '/dist/assets/', // 使用live-server预览, 主页的地址是/dist下面的(locahohost:5500/dist/index.html), 如果使用/assets则是访问与dist同级的assets // chunkFileName // 配置提取的异步chunk的名字, 只要文件没有改变, 就算删除了生成的dist下次打包的hash也不变 chunkFilename: '[name]@[chunkhash].js', }, // mode // webpack模式 mode: 'development',// 拥有很多默认的配置项 mode: 'production', // production模式有默认的js压缩, css压缩(可修改) // source-map // webpack5在mode:'develpment'不开启source-map也能查看源代码, mode:'production'需要开启才能使用source-map /** * source-map安全 * 1.hidden-source-map: 产出source-map但不在bundle中引用, 可以上传map到第三方服务,如Sentry追溯源码 * 2.nosources-source-map: 只展示错误出现的相关源码和行号信息, 相对source-map安全一些 * 3.nginx设置访问\\".map\\"白名单为公司内网 */ devtool: \\"source-map\\", // 还有cheap-source-map、eval-source-map是简略版本(完整的构建时间长), 开发环境使用cheap-module-eval-source-map打包速度和还原度适中 module: { rules: [ // 1-4章 { test: /\\\\.css$/, // webpack按照数组从后往前处理, 链式调用loader, 最后生效的放前面 use: ['style-loader', 'css-loader'], // 排除和包括目录, 实际项目中有多种灵活配置方式 // exclude优先级高于include exclude: /node_modules/, // 排除node_modules打包速度更快, 是必要的 include: /src/, // 如果你提供了 Rule.include 选项，就不能再提供 Rule.resource, 下面是等价配置 // 此处resource与上面的test, exlude等价 // resource:{ // test:/\\\\.css$/, // exlude:/node_moudles/ // }, // issuer配置异常, 仍需考虑 issuer: { test: /\\\\.js$/, // 只有特定目录下的目录中import的css才使用上面use中的style-loader include: [ // will include any paths relative to the current directory starting with \`app/styles\` // e.g. \`app/styles.css\`, \`app/styles/styles.css\`, \`app/stylesheet.css\` path.resolve(__dirname, 'app/styles'), // add an extra slash to only include the content of the directory \`vendor/styles/\` path.join(__dirname, 'vendor/styles/'), ], }, }, // 使用enforce配置对所有loader转换之前的代码使用eslint(配置异常, 仍需考虑) { test: /.js$/, // enfore指定loader的作用顺序 enforce: 'pre', // 取值pre(所有loader之前), inline(不推荐使用), normal(上面css-loader直接定义的就是normal), post(loader之后) use: 'eslint-loader' }, // file-loader使得js中可以加载各种文件 // 也可以使用webpack5中内置的方式 { test: /.(png|jpg|gif|svg)$/, use: 'file-loader' }, // webpack5内置文件导入方式: { test: /.(png|jpg|gif|svg)$/, type: 'asset/resource' }, // 第5章 样式加载 // css样式文件提取 { test: /\\\\.css$/, use: [ { loader: MiniCssExtractPlugin.loader, // 提取css样式 options: { publicPath: '../' } }, 'css-loader' ] }, // css样式预加载(less, sass) { test: /.\\\\.scss$/, use: [ 'style-loader', { loader: 'css-loader', options: { sourceMap: true } }, { loader: 'sass-loader', options: { sourceMap: true } }] }, ] }, // 6 代码分片, optimization: { /** * splitChunks具有默认的提取模式, 提取体积限制 * 1. chunk可共享或是来自node_modules * 2. 提取之后的Js chunk &gt;20kb, Css chunk &gt; 50kb, 如果资源体积过小, 优化效果也一般 * 3. 按需加载时(动态script插入), 并行请求资源最大值&lt;=30(因为不希望同时加载过多资源) * 4. 首次加载时，并行请求的资源数最大值&lt;=30。因为页面首次加载时往往对性能的要求更高，我们可将它手动设置为更低 */ // 下面的配置会生成一个vendors-node_modules_xxx, 例子中就是提取react模块 splitChunks: { // 对异步资源(import()函数加载的内容)不配置chunks也能生效,仅对异步资源如此(因为下方的async是默认) chunks: 'all', //3个可选值，分别为async（默认, 提取异步chunk）、initial(只对入口chunk生效)和all(开启async和initial两种模式) // 下面是splitChunks的默认配置(可选择性修改) // chunks: \\"async\\", // //minSize、minChunks、maxAsyncRequests、maxInitialRequests都属于匹配条件 // minSize: 20000, // minRemainingSize: 0, // minChunks: 1, // maxAsyncRequests: 30, // maxInitialRequests: 30, // enforceSizeThreshold: 50000, // cacheGroups: // 分离chunks时的规则。默认情况下两种——vendors和default // //vendors用于提取所有node_modules中符合条件的模块，default则作用于被多次引用的模块 // // 我们可以对下面的规则进行增加或者修改，如果想要禁用某种规则，也可以直接将其置为false // { // vendors: // vendors用于提取所有node_modules中符合条件的模块 // { // test: /[\\\\\\\\/]node_modules[\\\\\\\\/]/, // priority: -10, // }, // // default则作用于被多次引用的模块 // default: { // minChunks: 2, // priority: -20, // reuseExistingChunk: true, // }, // }, }, }, plugins: [ // 提取css new MiniCssExtractPlugin({ filename: '[name].css', chunkFilename: '[id].css' }), // 动态index.html(自动引入打包生成的js文件) // new HtmlWebpackPlugin()默认凭空创建一个index.html, 个性化需求可以指定使用的模板html文件 new HtmlWebpackPlugin(), // 动态Html, 处理资源路径, 加载index.html(如果不使用插件dist中需要手动放入html) new HtmlWebpackPlugin({ template: './public/index.html' // 目录就是相对配置文件的目录 }), new Analyzer(), // 打包资源大小分析工具 new DashboardPlugin(), ], // 10 打包缓存 /** * 缓存生成的 webpack 模块和 chunk，来改善构建速度 * cache 会在开发 模式被设置成 type: 'memory' 而且在 生产 模式 中被禁用 * cache: true 与 cache: { type: 'memory' } 配置作用一致。 传入 false 会禁用缓存 */ cache: { type: 'filesystem', // 另一个是内存缓存 buildDependencies: { importantDependency: ['src/'] } }, // webpack开发服务(&gt;=4.0.0)默认开启HMR(模块热更新) devServer: { static: { directory: path.join(__dirname, 'public'), }, compress: true, // 利用gzip压缩 port: 9000, }, }","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/blog/posts/%E5%BE%AE%E4%BF%A1%E8%AF%BB%E4%B9%A6/Webpack%E5%AE%9E%E6%88%98/%E9%85%8D%E7%BD%AE%E6%B1%87%E6%80%BB.html"}],["meta",{"property":"og:site_name","content":"Lee"}],["meta",{"property":"og:title","content":"Webpack配置汇总"}],["meta",{"property":"og:description","content":"Webpack配置汇总 看完了《Webpack实战：入门、进阶与调优》(第2版)把书里提到的基本内容都罗列到了一个配置文件中方便复习，为了显示效果，重复的配置项没有注释掉 const { webpack } = require('webpack') const MiniCssExtractPlugin = require('mini-css-extract-plugin') const path = require('path') const HtmlWebpackPlugin = require('html-webpack-plugin') // 动态Html, 处理资源路径, 加载index.html(如果不使用插件dist中需要手动放入html) const Analyzer = require('webpack-bundle-analyzer').BundleAnalyzerPlugin; const DashboardPlugin = require('webpack-dashboard/plugin') // webpack打包信息展示工具 module.exports = { entry: './src/index.js', output: { // filename // 指定打包js产物的文件名 filename: 'main.js', // 打包成一个bundle--&gt;main.js filename: '[name].js', // 可选id, name等... filename: '[name]@[chunkhash].js', // 名字@hash模式打包, 有利于客户端利用hash值缓存, 如果对应模块代码没有做出修改, 多次打包hash值不会改变 // publicPath // 指定资源请求的路径, 下面配置打包出来script标签src='/dsit/assets' publicPath: '/dist/assets/', // 使用live-server预览, 主页的地址是/dist下面的(locahohost:5500/dist/index.html), 如果使用/assets则是访问与dist同级的assets // chunkFileName // 配置提取的异步chunk的名字, 只要文件没有改变, 就算删除了生成的dist下次打包的hash也不变 chunkFilename: '[name]@[chunkhash].js', }, // mode // webpack模式 mode: 'development',// 拥有很多默认的配置项 mode: 'production', // production模式有默认的js压缩, css压缩(可修改) // source-map // webpack5在mode:'develpment'不开启source-map也能查看源代码, mode:'production'需要开启才能使用source-map /** * source-map安全 * 1.hidden-source-map: 产出source-map但不在bundle中引用, 可以上传map到第三方服务,如Sentry追溯源码 * 2.nosources-source-map: 只展示错误出现的相关源码和行号信息, 相对source-map安全一些 * 3.nginx设置访问\\".map\\"白名单为公司内网 */ devtool: \\"source-map\\", // 还有cheap-source-map、eval-source-map是简略版本(完整的构建时间长), 开发环境使用cheap-module-eval-source-map打包速度和还原度适中 module: { rules: [ // 1-4章 { test: /\\\\.css$/, // webpack按照数组从后往前处理, 链式调用loader, 最后生效的放前面 use: ['style-loader', 'css-loader'], // 排除和包括目录, 实际项目中有多种灵活配置方式 // exclude优先级高于include exclude: /node_modules/, // 排除node_modules打包速度更快, 是必要的 include: /src/, // 如果你提供了 Rule.include 选项，就不能再提供 Rule.resource, 下面是等价配置 // 此处resource与上面的test, exlude等价 // resource:{ // test:/\\\\.css$/, // exlude:/node_moudles/ // }, // issuer配置异常, 仍需考虑 issuer: { test: /\\\\.js$/, // 只有特定目录下的目录中import的css才使用上面use中的style-loader include: [ // will include any paths relative to the current directory starting with \`app/styles\` // e.g. \`app/styles.css\`, \`app/styles/styles.css\`, \`app/stylesheet.css\` path.resolve(__dirname, 'app/styles'), // add an extra slash to only include the content of the directory \`vendor/styles/\` path.join(__dirname, 'vendor/styles/'), ], }, }, // 使用enforce配置对所有loader转换之前的代码使用eslint(配置异常, 仍需考虑) { test: /.js$/, // enfore指定loader的作用顺序 enforce: 'pre', // 取值pre(所有loader之前), inline(不推荐使用), normal(上面css-loader直接定义的就是normal), post(loader之后) use: 'eslint-loader' }, // file-loader使得js中可以加载各种文件 // 也可以使用webpack5中内置的方式 { test: /.(png|jpg|gif|svg)$/, use: 'file-loader' }, // webpack5内置文件导入方式: { test: /.(png|jpg|gif|svg)$/, type: 'asset/resource' }, // 第5章 样式加载 // css样式文件提取 { test: /\\\\.css$/, use: [ { loader: MiniCssExtractPlugin.loader, // 提取css样式 options: { publicPath: '../' } }, 'css-loader' ] }, // css样式预加载(less, sass) { test: /.\\\\.scss$/, use: [ 'style-loader', { loader: 'css-loader', options: { sourceMap: true } }, { loader: 'sass-loader', options: { sourceMap: true } }] }, ] }, // 6 代码分片, optimization: { /** * splitChunks具有默认的提取模式, 提取体积限制 * 1. chunk可共享或是来自node_modules * 2. 提取之后的Js chunk &gt;20kb, Css chunk &gt; 50kb, 如果资源体积过小, 优化效果也一般 * 3. 按需加载时(动态script插入), 并行请求资源最大值&lt;=30(因为不希望同时加载过多资源) * 4. 首次加载时，并行请求的资源数最大值&lt;=30。因为页面首次加载时往往对性能的要求更高，我们可将它手动设置为更低 */ // 下面的配置会生成一个vendors-node_modules_xxx, 例子中就是提取react模块 splitChunks: { // 对异步资源(import()函数加载的内容)不配置chunks也能生效,仅对异步资源如此(因为下方的async是默认) chunks: 'all', //3个可选值，分别为async（默认, 提取异步chunk）、initial(只对入口chunk生效)和all(开启async和initial两种模式) // 下面是splitChunks的默认配置(可选择性修改) // chunks: \\"async\\", // //minSize、minChunks、maxAsyncRequests、maxInitialRequests都属于匹配条件 // minSize: 20000, // minRemainingSize: 0, // minChunks: 1, // maxAsyncRequests: 30, // maxInitialRequests: 30, // enforceSizeThreshold: 50000, // cacheGroups: // 分离chunks时的规则。默认情况下两种——vendors和default // //vendors用于提取所有node_modules中符合条件的模块，default则作用于被多次引用的模块 // // 我们可以对下面的规则进行增加或者修改，如果想要禁用某种规则，也可以直接将其置为false // { // vendors: // vendors用于提取所有node_modules中符合条件的模块 // { // test: /[\\\\\\\\/]node_modules[\\\\\\\\/]/, // priority: -10, // }, // // default则作用于被多次引用的模块 // default: { // minChunks: 2, // priority: -20, // reuseExistingChunk: true, // }, // }, }, }, plugins: [ // 提取css new MiniCssExtractPlugin({ filename: '[name].css', chunkFilename: '[id].css' }), // 动态index.html(自动引入打包生成的js文件) // new HtmlWebpackPlugin()默认凭空创建一个index.html, 个性化需求可以指定使用的模板html文件 new HtmlWebpackPlugin(), // 动态Html, 处理资源路径, 加载index.html(如果不使用插件dist中需要手动放入html) new HtmlWebpackPlugin({ template: './public/index.html' // 目录就是相对配置文件的目录 }), new Analyzer(), // 打包资源大小分析工具 new DashboardPlugin(), ], // 10 打包缓存 /** * 缓存生成的 webpack 模块和 chunk，来改善构建速度 * cache 会在开发 模式被设置成 type: 'memory' 而且在 生产 模式 中被禁用 * cache: true 与 cache: { type: 'memory' } 配置作用一致。 传入 false 会禁用缓存 */ cache: { type: 'filesystem', // 另一个是内存缓存 buildDependencies: { importantDependency: ['src/'] } }, // webpack开发服务(&gt;=4.0.0)默认开启HMR(模块热更新) devServer: { static: { directory: path.join(__dirname, 'public'), }, compress: true, // 利用gzip压缩 port: 9000, }, }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-01-31T02:34:07.000Z"}],["meta",{"property":"article:author","content":"Lee"}],["meta",{"property":"article:modified_time","content":"2024-01-31T02:34:07.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Webpack配置汇总\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-01-31T02:34:07.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Lee\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[],"git":{"createdTime":1706668447000,"updatedTime":1706668447000,"contributors":[{"name":"righthan","email":"2753875841@qq.com","commits":1}]},"readingTime":{"minutes":5.4,"words":1619},"filePathRelative":"posts/微信读书/Webpack实战/配置汇总.md","localizedDate":"2024年1月31日","excerpt":"<h1> Webpack配置汇总</h1>\\n<p>看完了《Webpack实战：入门、进阶与调优》(第2版)把书里提到的基本内容都罗列到了一个配置文件中方便复习，为了显示效果，重复的配置项没有注释掉</p>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">const</span> <span class=\\"token punctuation\\">{</span> webpack <span class=\\"token punctuation\\">}</span> <span class=\\"token operator\\">=</span> <span class=\\"token function\\">require</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'webpack'</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token keyword\\">const</span> MiniCssExtractPlugin <span class=\\"token operator\\">=</span> <span class=\\"token function\\">require</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'mini-css-extract-plugin'</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token keyword\\">const</span> path <span class=\\"token operator\\">=</span> <span class=\\"token function\\">require</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'path'</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token keyword\\">const</span> HtmlWebpackPlugin <span class=\\"token operator\\">=</span> <span class=\\"token function\\">require</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'html-webpack-plugin'</span><span class=\\"token punctuation\\">)</span> <span class=\\"token comment\\">// 动态Html, 处理资源路径, 加载index.html(如果不使用插件dist中需要手动放入html)</span>\\n<span class=\\"token keyword\\">const</span> Analyzer <span class=\\"token operator\\">=</span> <span class=\\"token function\\">require</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'webpack-bundle-analyzer'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span>BundleAnalyzerPlugin<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">const</span> DashboardPlugin <span class=\\"token operator\\">=</span> <span class=\\"token function\\">require</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'webpack-dashboard/plugin'</span><span class=\\"token punctuation\\">)</span> <span class=\\"token comment\\">// webpack打包信息展示工具</span>\\n\\nmodule<span class=\\"token punctuation\\">.</span>exports <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token literal-property property\\">entry</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">'./src/index.js'</span><span class=\\"token punctuation\\">,</span>\\n    <span class=\\"token literal-property property\\">output</span><span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token comment\\">// filename</span>\\n        <span class=\\"token comment\\">// 指定打包js产物的文件名</span>\\n        <span class=\\"token literal-property property\\">filename</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">'main.js'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token comment\\">// 打包成一个bundle--&gt;main.js</span>\\n        <span class=\\"token literal-property property\\">filename</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">'[name].js'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token comment\\">// 可选id, name等...</span>\\n        <span class=\\"token literal-property property\\">filename</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">'[name]@[chunkhash].js'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token comment\\">// 名字@hash模式打包, 有利于客户端利用hash值缓存, 如果对应模块代码没有做出修改, 多次打包hash值不会改变</span>\\n        <span class=\\"token comment\\">// publicPath</span>\\n        <span class=\\"token comment\\">// 指定资源请求的路径, 下面配置打包出来script标签src='/dsit/assets'</span>\\n        <span class=\\"token literal-property property\\">publicPath</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">'/dist/assets/'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token comment\\">// 使用live-server预览, 主页的地址是/dist下面的(locahohost:5500/dist/index.html), 如果使用/assets则是访问与dist同级的assets</span>\\n        <span class=\\"token comment\\">// chunkFileName</span>\\n        <span class=\\"token comment\\">// 配置提取的异步chunk的名字, 只要文件没有改变, 就算删除了生成的dist下次打包的hash也不变</span>\\n        <span class=\\"token literal-property property\\">chunkFilename</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">'[name]@[chunkhash].js'</span><span class=\\"token punctuation\\">,</span>\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n    <span class=\\"token comment\\">// mode</span>\\n    <span class=\\"token comment\\">// webpack模式</span>\\n    <span class=\\"token literal-property property\\">mode</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">'development'</span><span class=\\"token punctuation\\">,</span><span class=\\"token comment\\">// 拥有很多默认的配置项</span>\\n    <span class=\\"token literal-property property\\">mode</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">'production'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token comment\\">// production模式有默认的js压缩, css压缩(可修改)</span>\\n    <span class=\\"token comment\\">// source-map</span>\\n    <span class=\\"token comment\\">// webpack5在mode:'develpment'不开启source-map也能查看源代码, mode:'production'需要开启才能使用source-map</span>\\n    <span class=\\"token doc-comment comment\\">/**\\n     * source-map安全\\n     * 1.hidden-source-map: 产出source-map但不在bundle中引用, 可以上传map到第三方服务,如Sentry追溯源码\\n     * 2.nosources-source-map: 只展示错误出现的相关源码和行号信息, 相对source-map安全一些\\n     * 3.nginx设置访问\\".map\\"白名单为公司内网\\n     */</span>\\n    <span class=\\"token literal-property property\\">devtool</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">\\"source-map\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token comment\\">// 还有cheap-source-map、eval-source-map是简略版本(完整的构建时间长), 开发环境使用cheap-module-eval-source-map打包速度和还原度适中</span>\\n\\n    <span class=\\"token literal-property property\\">module</span><span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token literal-property property\\">rules</span><span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">[</span>\\n            <span class=\\"token comment\\">// 1-4章</span>\\n            <span class=\\"token punctuation\\">{</span>\\n                <span class=\\"token literal-property property\\">test</span><span class=\\"token operator\\">:</span> <span class=\\"token regex\\"><span class=\\"token regex-delimiter\\">/</span><span class=\\"token regex-source language-regex\\">\\\\.css$</span><span class=\\"token regex-delimiter\\">/</span></span><span class=\\"token punctuation\\">,</span>\\n                <span class=\\"token comment\\">// webpack按照数组从后往前处理, 链式调用loader, 最后生效的放前面</span>\\n                <span class=\\"token literal-property property\\">use</span><span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">[</span><span class=\\"token string\\">'style-loader'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">'css-loader'</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">,</span>\\n                <span class=\\"token comment\\">// 排除和包括目录, 实际项目中有多种灵活配置方式</span>\\n                <span class=\\"token comment\\">// exclude优先级高于include</span>\\n                <span class=\\"token literal-property property\\">exclude</span><span class=\\"token operator\\">:</span> <span class=\\"token regex\\"><span class=\\"token regex-delimiter\\">/</span><span class=\\"token regex-source language-regex\\">node_modules</span><span class=\\"token regex-delimiter\\">/</span></span><span class=\\"token punctuation\\">,</span> <span class=\\"token comment\\">// 排除node_modules打包速度更快, 是必要的</span>\\n                <span class=\\"token literal-property property\\">include</span><span class=\\"token operator\\">:</span> <span class=\\"token regex\\"><span class=\\"token regex-delimiter\\">/</span><span class=\\"token regex-source language-regex\\">src</span><span class=\\"token regex-delimiter\\">/</span></span><span class=\\"token punctuation\\">,</span> <span class=\\"token comment\\">// 如果你提供了 Rule.include 选项，就不能再提供 Rule.resource, 下面是等价配置</span>\\n                <span class=\\"token comment\\">// 此处resource与上面的test, exlude等价</span>\\n                <span class=\\"token comment\\">// resource:{</span>\\n                <span class=\\"token comment\\">//     test:/\\\\.css$/,</span>\\n                <span class=\\"token comment\\">//     exlude:/node_moudles/</span>\\n                <span class=\\"token comment\\">// },</span>\\n                <span class=\\"token comment\\">// issuer配置异常, 仍需考虑</span>\\n                <span class=\\"token literal-property property\\">issuer</span><span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">{</span>\\n                    <span class=\\"token literal-property property\\">test</span><span class=\\"token operator\\">:</span> <span class=\\"token regex\\"><span class=\\"token regex-delimiter\\">/</span><span class=\\"token regex-source language-regex\\">\\\\.js$</span><span class=\\"token regex-delimiter\\">/</span></span><span class=\\"token punctuation\\">,</span>\\n                    <span class=\\"token comment\\">// 只有特定目录下的目录中import的css才使用上面use中的style-loader</span>\\n                    <span class=\\"token literal-property property\\">include</span><span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">[</span>\\n                        <span class=\\"token comment\\">// will include any paths relative to the current directory starting with \`app/styles\`</span>\\n                        <span class=\\"token comment\\">// e.g. \`app/styles.css\`, \`app/styles/styles.css\`, \`app/stylesheet.css\`</span>\\n                        path<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">resolve</span><span class=\\"token punctuation\\">(</span>__dirname<span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">'app/styles'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span>\\n                        <span class=\\"token comment\\">// add an extra slash to only include the content of the directory \`vendor/styles/\`</span>\\n                        path<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">join</span><span class=\\"token punctuation\\">(</span>__dirname<span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">'vendor/styles/'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span>\\n                    <span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">,</span>\\n                <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n            <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n            <span class=\\"token comment\\">// 使用enforce配置对所有loader转换之前的代码使用eslint(配置异常, 仍需考虑)</span>\\n            <span class=\\"token punctuation\\">{</span>\\n                <span class=\\"token literal-property property\\">test</span><span class=\\"token operator\\">:</span> <span class=\\"token regex\\"><span class=\\"token regex-delimiter\\">/</span><span class=\\"token regex-source language-regex\\">.js$</span><span class=\\"token regex-delimiter\\">/</span></span><span class=\\"token punctuation\\">,</span>\\n                <span class=\\"token comment\\">// enfore指定loader的作用顺序</span>\\n                <span class=\\"token literal-property property\\">enforce</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">'pre'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token comment\\">// 取值pre(所有loader之前), inline(不推荐使用), normal(上面css-loader直接定义的就是normal), post(loader之后)</span>\\n                <span class=\\"token literal-property property\\">use</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">'eslint-loader'</span>\\n            <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n            <span class=\\"token comment\\">// file-loader使得js中可以加载各种文件</span>\\n            <span class=\\"token comment\\">// 也可以使用webpack5中内置的方式</span>\\n            <span class=\\"token punctuation\\">{</span>\\n                <span class=\\"token literal-property property\\">test</span><span class=\\"token operator\\">:</span> <span class=\\"token regex\\"><span class=\\"token regex-delimiter\\">/</span><span class=\\"token regex-source language-regex\\">.(png|jpg|gif|svg)$</span><span class=\\"token regex-delimiter\\">/</span></span><span class=\\"token punctuation\\">,</span>\\n                <span class=\\"token literal-property property\\">use</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">'file-loader'</span>\\n            <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n            <span class=\\"token comment\\">// webpack5内置文件导入方式:</span>\\n            <span class=\\"token punctuation\\">{</span>\\n                <span class=\\"token literal-property property\\">test</span><span class=\\"token operator\\">:</span> <span class=\\"token regex\\"><span class=\\"token regex-delimiter\\">/</span><span class=\\"token regex-source language-regex\\">.(png|jpg|gif|svg)$</span><span class=\\"token regex-delimiter\\">/</span></span><span class=\\"token punctuation\\">,</span>\\n                <span class=\\"token literal-property property\\">type</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">'asset/resource'</span>\\n            <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n            <span class=\\"token comment\\">// 第5章 样式加载</span>\\n            <span class=\\"token comment\\">// css样式文件提取</span>\\n            <span class=\\"token punctuation\\">{</span>\\n                <span class=\\"token literal-property property\\">test</span><span class=\\"token operator\\">:</span> <span class=\\"token regex\\"><span class=\\"token regex-delimiter\\">/</span><span class=\\"token regex-source language-regex\\">\\\\.css$</span><span class=\\"token regex-delimiter\\">/</span></span><span class=\\"token punctuation\\">,</span>\\n                <span class=\\"token literal-property property\\">use</span><span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">[</span>\\n                    <span class=\\"token punctuation\\">{</span>\\n                        <span class=\\"token literal-property property\\">loader</span><span class=\\"token operator\\">:</span> MiniCssExtractPlugin<span class=\\"token punctuation\\">.</span>loader<span class=\\"token punctuation\\">,</span> <span class=\\"token comment\\">// 提取css样式</span>\\n                        <span class=\\"token literal-property property\\">options</span><span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">{</span>\\n                            <span class=\\"token literal-property property\\">publicPath</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">'../'</span>\\n                        <span class=\\"token punctuation\\">}</span>\\n                    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n                    <span class=\\"token string\\">'css-loader'</span>\\n                <span class=\\"token punctuation\\">]</span>\\n            <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n            <span class=\\"token comment\\">// css样式预加载(less, sass)</span>\\n            <span class=\\"token punctuation\\">{</span>\\n                <span class=\\"token literal-property property\\">test</span><span class=\\"token operator\\">:</span> <span class=\\"token regex\\"><span class=\\"token regex-delimiter\\">/</span><span class=\\"token regex-source language-regex\\">.\\\\.scss$</span><span class=\\"token regex-delimiter\\">/</span></span><span class=\\"token punctuation\\">,</span>\\n                <span class=\\"token literal-property property\\">use</span><span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">[</span>\\n                    <span class=\\"token string\\">'style-loader'</span><span class=\\"token punctuation\\">,</span>\\n                    <span class=\\"token punctuation\\">{</span>\\n                        <span class=\\"token literal-property property\\">loader</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">'css-loader'</span><span class=\\"token punctuation\\">,</span>\\n                        <span class=\\"token literal-property property\\">options</span><span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">{</span>\\n                            <span class=\\"token literal-property property\\">sourceMap</span><span class=\\"token operator\\">:</span> <span class=\\"token boolean\\">true</span>\\n                        <span class=\\"token punctuation\\">}</span>\\n                    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n                    <span class=\\"token punctuation\\">{</span>\\n                        <span class=\\"token literal-property property\\">loader</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">'sass-loader'</span><span class=\\"token punctuation\\">,</span>\\n                        <span class=\\"token literal-property property\\">options</span><span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">{</span>\\n                            <span class=\\"token literal-property property\\">sourceMap</span><span class=\\"token operator\\">:</span> <span class=\\"token boolean\\">true</span>\\n                        <span class=\\"token punctuation\\">}</span>\\n                    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">]</span>\\n            <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n\\n        <span class=\\"token punctuation\\">]</span>\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n    <span class=\\"token comment\\">// 6 代码分片,</span>\\n    <span class=\\"token literal-property property\\">optimization</span><span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token doc-comment comment\\">/**\\n         * splitChunks具有默认的提取模式, 提取体积限制\\n         * 1. chunk可共享或是来自node_modules\\n         * 2. 提取之后的Js chunk &gt;20kb, Css chunk &gt; 50kb, 如果资源体积过小, 优化效果也一般\\n         * 3. 按需加载时(动态script插入), 并行请求资源最大值&lt;=30(因为不希望同时加载过多资源)\\n         * 4. 首次加载时，并行请求的资源数最大值&lt;=30。因为页面首次加载时往往对性能的要求更高，我们可将它手动设置为更低\\n         */</span>\\n        <span class=\\"token comment\\">// 下面的配置会生成一个vendors-node_modules_xxx, 例子中就是提取react模块</span>\\n        <span class=\\"token literal-property property\\">splitChunks</span><span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token comment\\">// 对异步资源(import()函数加载的内容)不配置chunks也能生效,仅对异步资源如此(因为下方的async是默认)</span>\\n            <span class=\\"token literal-property property\\">chunks</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">'all'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token comment\\">//3个可选值，分别为async（默认, 提取异步chunk）、initial(只对入口chunk生效)和all(开启async和initial两种模式)</span>\\n            <span class=\\"token comment\\">// 下面是splitChunks的默认配置(可选择性修改)</span>\\n            <span class=\\"token comment\\">// chunks: \\"async\\",</span>\\n            <span class=\\"token comment\\">// //minSize、minChunks、maxAsyncRequests、maxInitialRequests都属于匹配条件</span>\\n            <span class=\\"token comment\\">// minSize: 20000,</span>\\n            <span class=\\"token comment\\">// minRemainingSize: 0,</span>\\n            <span class=\\"token comment\\">// minChunks: 1,</span>\\n            <span class=\\"token comment\\">// maxAsyncRequests: 30,</span>\\n            <span class=\\"token comment\\">// maxInitialRequests: 30,</span>\\n            <span class=\\"token comment\\">// enforceSizeThreshold: 50000,</span>\\n            <span class=\\"token comment\\">// cacheGroups:  // 分离chunks时的规则。默认情况下两种——vendors和default</span>\\n            <span class=\\"token comment\\">// //vendors用于提取所有node_modules中符合条件的模块，default则作用于被多次引用的模块</span>\\n            <span class=\\"token comment\\">// // 我们可以对下面的规则进行增加或者修改，如果想要禁用某种规则，也可以直接将其置为false</span>\\n            <span class=\\"token comment\\">// {</span>\\n            <span class=\\"token comment\\">//     vendors: // vendors用于提取所有node_modules中符合条件的模块</span>\\n            <span class=\\"token comment\\">//     {</span>\\n            <span class=\\"token comment\\">//         test: /[\\\\\\\\/]node_modules[\\\\\\\\/]/,</span>\\n            <span class=\\"token comment\\">//         priority: -10,</span>\\n            <span class=\\"token comment\\">//     },</span>\\n            <span class=\\"token comment\\">//     // default则作用于被多次引用的模块</span>\\n            <span class=\\"token comment\\">//     default: {</span>\\n            <span class=\\"token comment\\">//         minChunks: 2,</span>\\n            <span class=\\"token comment\\">//         priority: -20,</span>\\n            <span class=\\"token comment\\">//         reuseExistingChunk: true,</span>\\n            <span class=\\"token comment\\">//     },</span>\\n            <span class=\\"token comment\\">// },</span>\\n        <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n    <span class=\\"token literal-property property\\">plugins</span><span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">[</span>\\n        <span class=\\"token comment\\">// 提取css</span>\\n        <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">MiniCssExtractPlugin</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token literal-property property\\">filename</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">'[name].css'</span><span class=\\"token punctuation\\">,</span>\\n            <span class=\\"token literal-property property\\">chunkFilename</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">'[id].css'</span>\\n        <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span>\\n        <span class=\\"token comment\\">// 动态index.html(自动引入打包生成的js文件)</span>\\n        <span class=\\"token comment\\">// new HtmlWebpackPlugin()默认凭空创建一个index.html, 个性化需求可以指定使用的模板html文件</span>\\n        <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">HtmlWebpackPlugin</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span> <span class=\\"token comment\\">// 动态Html, 处理资源路径, 加载index.html(如果不使用插件dist中需要手动放入html) </span>\\n        <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">HtmlWebpackPlugin</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token literal-property property\\">template</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">'./public/index.html'</span> <span class=\\"token comment\\">// 目录就是相对配置文件的目录</span>\\n        <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span>\\n        <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">Analyzer</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span> <span class=\\"token comment\\">// 打包资源大小分析工具</span>\\n        <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">DashboardPlugin</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span>\\n    <span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">,</span>\\n    <span class=\\"token comment\\">// 10 打包缓存</span>\\n    <span class=\\"token doc-comment comment\\">/**\\n     * 缓存生成的 webpack 模块和 chunk，来改善构建速度\\n     * cache 会在开发 模式被设置成 type: 'memory' 而且在 生产 模式 中被禁用\\n     * cache: true 与 cache: <span class=\\"token punctuation\\">{</span> type: 'memory' <span class=\\"token punctuation\\">}</span> 配置作用一致。 传入 false 会禁用缓存\\n     */</span>\\n    <span class=\\"token literal-property property\\">cache</span><span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token literal-property property\\">type</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">'filesystem'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token comment\\">// 另一个是内存缓存</span>\\n        <span class=\\"token literal-property property\\">buildDependencies</span><span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token literal-property property\\">importantDependency</span><span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">[</span><span class=\\"token string\\">'src/'</span><span class=\\"token punctuation\\">]</span>\\n        <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n    <span class=\\"token comment\\">// webpack开发服务(&gt;=4.0.0)默认开启HMR(模块热更新)</span>\\n    <span class=\\"token literal-property property\\">devServer</span><span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">static</span><span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token literal-property property\\">directory</span><span class=\\"token operator\\">:</span> path<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">join</span><span class=\\"token punctuation\\">(</span>__dirname<span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">'public'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span>\\n        <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n        <span class=\\"token literal-property property\\">compress</span><span class=\\"token operator\\">:</span> <span class=\\"token boolean\\">true</span><span class=\\"token punctuation\\">,</span> <span class=\\"token comment\\">// 利用gzip压缩</span>\\n        <span class=\\"token literal-property property\\">port</span><span class=\\"token operator\\">:</span> <span class=\\"token number\\">9000</span><span class=\\"token punctuation\\">,</span>\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{s as data};
