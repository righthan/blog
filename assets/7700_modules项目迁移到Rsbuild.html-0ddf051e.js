import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as i,o as l,c as o,a as s,b as n,d as p,f as a}from"./app-f42bf8ce.js";const c="/blog/assets/image-20240218104252030-b3dcb3da.png",u="/blog/assets/image-20240218102545922-a35f66e4.png",d={},r=a('<h1 id="_7700-modules项目迁移到rsbuild" tabindex="-1"><a class="header-anchor" href="#_7700-modules项目迁移到rsbuild" aria-hidden="true">#</a> 7700+modules项目迁移到Rsbuild</h1><p>在学习了Webpack之后，了解到了字节开源的使用Rust编写的Rsbuild前端构建工具，便把手头的一个总共含有7700多个模块的Vue Cli构建的项目，迁移到Rsbuild，测试实际效果，浅浅尝试一番</p><h2 id="使用vue-cli构建的时间" tabindex="-1"><a class="header-anchor" href="#使用vue-cli构建的时间" aria-hidden="true">#</a> 使用Vue Cli构建的时间</h2><p>在没有迁移之前，使用的是Vue Cli, 构建的使用花费大概需要一分多钟，每次开发都感觉项目启动十分耗时</p><h2 id="使用rsbuild构建的时间" tabindex="-1"><a class="header-anchor" href="#使用rsbuild构建的时间" aria-hidden="true">#</a> 使用Rsbuild构建的时间</h2>',5),m={href:"https://rsbuild.dev/zh/guide/migration/vue-cli",target:"_blank",rel:"noopener noreferrer"},b=a('<p><strong>项目的编译和启动时间有了大幅的缩短，总共只需十几秒就完成了编译</strong></p><figure><img src="'+c+`" alt="image-20240218104252030" tabindex="0" loading="lazy"><figcaption>image-20240218104252030</figcaption></figure><h3 id="遇到的问题" tabindex="-1"><a class="header-anchor" href="#遇到的问题" aria-hidden="true">#</a> 遇到的问题</h3><ol><li>编码格式错误</li></ol><p>项目Compling时， 提示</p><div class="language-txt line-numbers-mode" data-ext="txt"><pre class="language-txt"><code>start   Compiling...
error   Compile error: 
Failed to compile, check the errors for troubleshooting.
File: ./src/API/homePageQuery.js
  × Module build failed:
  ╰─▶   × invalid utf-8 sequence of 1 bytes from index 46

  help: File was processed with this loader: &#39;builtin:swc-loader??clonedRuleSet-2.use[0]&#39;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>打开这个文件发现，里面的注释乱码了，所以应该是一些同学使用错误的编码格式导致的，在VS Code中修改使用utf-8重新保存，替换了乱码的注释，最后项目正常编译</p><ol start="2"><li>getComputedStyle无法执行</li></ol><p>打开浏览器时，项目无法运行，控制台报错如下</p><figure><img src="`+u+`" alt="image-20240218102545922" tabindex="0" loading="lazy"><figcaption>image-20240218102545922</figcaption></figure><p>查看对应的源代码时，发现好像对应的<code>getComputedStyle</code>代码s似乎并没有实际的用处</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//修改 elementPlus 全局主题</span>
<span class="token keyword">const</span> el <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;app&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">getComputedStyle</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPropertyValue</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">--el-color-primary</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
el<span class="token punctuation">.</span>style<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">&#39;--el-color-primary&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;rgb(24,56,140)&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>经过测试，虽然删除这一修改主题的代码，但是获取的el是null，也就是没有获取到vue项目中的重新查看文档，原来是忘了指定HTML模板，以为Rsbuild使用的是默认的 <code>public/index.html</code>，实际上在Rsbuild中需要显式配置！！如果HTML模板中使用到了 <code>BASE_URL</code>变量，则会报错，按照官网上的方法替换为assetPrefix并在路径上添加斜线，但是类似 <code>&lt;%= htmlWebpackPlugin.options.title %&gt;</code>这样的引用确实能直接使用，不需要修改的。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token comment">// 指定模板文件</span>
  html<span class="token operator">:</span> <span class="token punctuation">{</span>
    template<span class="token operator">:</span> <span class="token string">&#39;./public/index.html&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,14);function g(v,k){const e=i("ExternalLinkIcon");return l(),o("div",null,[r,s("p",null,[n("将项目从Vue Cli迁移到Rsbuild在Rsbuild的官方文档里已经详细说明，参考"),s("a",m,[n("Vue CLI - Rsbuild"),p(e)]),n("，主要是修改配置文件中的模板和跨域")]),b])}const _=t(d,[["render",g],["__file","7700_modules项目迁移到Rsbuild.html.vue"]]);export{_ as default};
