const n=JSON.parse('{"key":"v-04544fc1","path":"/posts/%E5%AD%A6%E4%B9%A0%E5%B0%8F%E8%AE%B0/JS%E5%88%9B%E5%BB%BA%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E7%9A%84%E6%B3%A8%E6%84%8F%E7%82%B9.html","title":"JS创建二维数组的注意点","lang":"zh-CN","frontmatter":{"title":"JS创建二维数组的注意点","category":["学习小记"],"tag":["JavaScript"],"contributors":false,"editLink":false,"comment":false,"description":"JS 创建二维数组的注意点 使用 JS 也挺久了，没想到对一些关键函数的使用还是模棱两可，通过创建二维数组踩的许多坑，才进一步了解了数组中 map,fill，拓展运算符使用中需要特别注意的地方， 在 LeetCode 刷题写动态规划的时候，经常需要创建二维的数组，平时使用的大都是下面的方式创建 const dp: number[][] = new Array(m).fill(0).map(() =&gt; new Array(n).fill(0));","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/blog/posts/%E5%AD%A6%E4%B9%A0%E5%B0%8F%E8%AE%B0/JS%E5%88%9B%E5%BB%BA%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E7%9A%84%E6%B3%A8%E6%84%8F%E7%82%B9.html"}],["meta",{"property":"og:site_name","content":"Lee"}],["meta",{"property":"og:title","content":"JS创建二维数组的注意点"}],["meta",{"property":"og:description","content":"JS 创建二维数组的注意点 使用 JS 也挺久了，没想到对一些关键函数的使用还是模棱两可，通过创建二维数组踩的许多坑，才进一步了解了数组中 map,fill，拓展运算符使用中需要特别注意的地方， 在 LeetCode 刷题写动态规划的时候，经常需要创建二维的数组，平时使用的大都是下面的方式创建 const dp: number[][] = new Array(m).fill(0).map(() =&gt; new Array(n).fill(0));"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-24T02:40:15.000Z"}],["meta",{"property":"article:author","content":"Lee"}],["meta",{"property":"article:tag","content":"JavaScript"}],["meta",{"property":"article:modified_time","content":"2024-03-24T02:40:15.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"JS创建二维数组的注意点\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-03-24T02:40:15.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Lee\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"1 使用省略第一个 fill 导致的错误","slug":"_1-使用省略第一个-fill-导致的错误","link":"#_1-使用省略第一个-fill-导致的错误","children":[]},{"level":2,"title":"2 使用 fill 直接填充","slug":"_2-使用-fill-直接填充","link":"#_2-使用-fill-直接填充","children":[]},{"level":2,"title":"3 使用扩展展运算符","slug":"_3-使用扩展展运算符","link":"#_3-使用扩展展运算符","children":[]}],"git":{"createdTime":1711248015000,"updatedTime":1711248015000,"contributors":[{"name":"righthan","email":"2753875841@qq.com","commits":1}]},"readingTime":{"minutes":3.12,"words":937},"filePathRelative":"posts/学习小记/JS创建二维数组的注意点.md","localizedDate":"2024年3月24日","excerpt":"<h1> JS 创建二维数组的注意点</h1>\\n<p>使用 JS 也挺久了，没想到对一些关键函数的使用还是模棱两可，通过创建二维数组踩的许多坑，才进一步了解了数组中 map,fill，拓展运算符使用中需要特别注意的地方，<br>\\n在 LeetCode 刷题写动态规划的时候，经常需要创建二维的数组，平时使用的大都是下面的方式创建</p>\\n<div class=\\"language-typescript line-numbers-mode\\" data-ext=\\"ts\\"><pre class=\\"language-typescript\\"><code><span class=\\"token keyword\\">const</span> dp<span class=\\"token operator\\">:</span> <span class=\\"token builtin\\">number</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\"><span class=\\"token builtin\\">Array</span></span><span class=\\"token punctuation\\">(</span>m<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">fill</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">map</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\"><span class=\\"token builtin\\">Array</span></span><span class=\\"token punctuation\\">(</span>n<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">fill</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};
